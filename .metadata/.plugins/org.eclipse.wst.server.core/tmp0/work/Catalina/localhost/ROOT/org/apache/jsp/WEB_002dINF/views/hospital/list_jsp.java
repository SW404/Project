/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.5
 * Generated at: 2022-05-18 00:28:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.hospital;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/git/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/project01/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1647577167351L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!doctype html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <title>Map </title>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write(" \r\n");
      out.write(" <!-- test2 -->\r\n");
      out.write("    \r\n");
      out.write("     <style type=\"text/css\">\r\n");
      out.write("      /* Always set the map height explicitly to define the size of the div\r\n");
      out.write("       * element that contains the map. */\r\n");
      out.write("       \r\n");
      out.write("      #map {\r\n");
      out.write("        height: 100%;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      /* Optional: Makes the sample page fill the window. */\r\n");
      out.write("      html,\r\n");
      out.write("      body {\r\n");
      out.write("        height: 100%;\r\n");
      out.write("        margin: 0;\r\n");
      out.write("        padding: 0;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      body {\r\n");
      out.write("        padding: 0 !important;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      table {\r\n");
      out.write("        font-size: 15px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .hospital-search {\r\n");
      out.write("        -webkit-box-align: center;\r\n");
      out.write("        -ms-flex-align: center;\r\n");
      out.write("        align-items: center;\r\n");
      out.write("        background: #fff;\r\n");
      out.write("        display: -webkit-box;\r\n");
      out.write("        display: -ms-flexbox;\r\n");
      out.write("        display: flex;\r\n");
      out.write("        left: 0;\r\n");
      out.write("        position: absolute;\r\n");
      out.write("        top: 0;\r\n");
      out.write("        width: 880px;\r\n");
      out.write("        z-index: 1;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #map {\r\n");
      out.write("        margin-top: 70px;\r\n");
      out.write("        width: auto;\r\n");
      out.write("        height: 800px;\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        border : 10px solid #F7E1E4;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #listing {\r\n");
      out.write("        position: absolute;\r\n");
      out.write("        width: auto;\r\n");
      out.write("        height: 490px;\r\n");
      out.write("        overflow: auto;\r\n");
      out.write("        left: 10px;\r\n");
      out.write("        top: 140px;\r\n");
      out.write("        cursor: pointer;\r\n");
      out.write("        overflow-x: hidden;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #findhospitals {\r\n");
      out.write("        font-size: 14px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #locationField {\r\n");
      out.write("        -webkit-box-flex: 1 1 190px;\r\n");
      out.write("        -ms-flex: 1 1 190px;\r\n");
      out.write("        flex: 1 1 190px;\r\n");
      out.write("        margin: 0 8px;\r\n");
      out.write("      }\r\n");
      out.write("   \r\n");
      out.write("      #controls {\r\n");
      out.write("        -webkit-box-flex: 1 1 140px;\r\n");
      out.write("        -ms-flex: 1 1 140px;\r\n");
      out.write("        flex: 1 1 140px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #autocomplete {\r\n");
      out.write("        width: 100%;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #country {\r\n");
      out.write("        width: 100%;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .placeIcon {\r\n");
      out.write("        width: 20px;\r\n");
      out.write("        height: 34px;\r\n");
      out.write("        margin: 4px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .hospitalIcon {\r\n");
      out.write("        width: 24px;\r\n");
      out.write("        height: 24px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #resultsTable {\r\n");
      out.write("        border-collapse: collapse;\r\n");
      out.write("        width: 240px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #rating {\r\n");
      out.write("        font-size: 13px;\r\n");
      out.write("        font-family: Arial Unicode MS;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .iw_table_row {\r\n");
      out.write("        height: 18px;\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      #iw-address, #iw-phone, #iw-rating {\r\n");
      out.write("      \tdisplay:inline-block;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .iw_attribute_name {\r\n");
      out.write("        font-weight: bold;\r\n");
      out.write("        text-align: left;\r\n");
      out.write("        display:inline-block;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .iw_table_icon {\r\n");
      out.write("        text-align: center;\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      .container{\r\n");
      out.write("      \twidth:100%;\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      a:focus{\r\n");
      out.write("      \toutline:none;\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      #iw-url-row{\r\n");
      out.write("      \tfont-size:20px;\r\n");
      out.write("      \ttext-align:center;\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      #autocomplete{\r\n");
      out.write("      \tfont-size:30px;\r\n");
      out.write("      \tpadding : 10px;\r\n");
      out.write("      \tborder:none;\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      #autocomplete:focus{\r\n");
      out.write("      \toutline:none;\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      #hos_search_box {\r\n");
      out.write("\t      border : 10px solid #FED8E0;\r\n");
      out.write("\t      display:inline-block;\r\n");
      out.write("\t      margin-top:-50px;\r\n");
      out.write("\t      margin-bottom: 50px;\r\n");
      out.write("\t      text-align:center;\r\n");
      out.write("\t      background:white;\r\n");
      out.write("\t      width:650px;\r\n");
      out.write("\t   }\r\n");
      out.write("\t   \r\n");
      out.write("\t   #banner_top{\r\n");
      out.write("\t      margin-left:200px;\r\n");
      out.write("\t   }\r\n");
      out.write("      \r\n");
      out.write("     @import url(//fonts.googleapis.com/earlyaccess/notosanskr.css);\r\n");
      out.write("\r\n");
      out.write(".notosanskr * { \r\n");
      out.write(" font-family: 'Noto Sans KR', sans-serif;\r\n");
      out.write("}\r\n");
      out.write("body {\r\n");
      out.write("   font-family: 'Noto Sans KR', sans-serif;\r\n");
      out.write("   text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\t#hsearch{\r\n");
      out.write("      width:100px;\r\n");
      out.write("      height:100px;\r\n");
      out.write("      cursor:pointer;\r\n");
      out.write("   }\r\n");
      out.write("    </style>\r\n");
      out.write("    <script>\r\n");
      out.write("      // This example uses the autocomplete feature of the Google Places API.\r\n");
      out.write("      // It allows the user to find all hospitals in a given place, within a given\r\n");
      out.write("      // country. It then displays markers for all the hospitals returned,\r\n");
      out.write("      // with on-click details for each hospital.\r\n");
      out.write("      // This example requires the Places library. Include the libraries=places\r\n");
      out.write("      // parameter when you first load the API. For example:\r\n");
      out.write("      // <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">\r\n");
      out.write("      let map;\r\n");
      out.write("      let places;\r\n");
      out.write("      let infoWindow;\r\n");
      out.write("      let markers = [];\r\n");
      out.write("      let autocomplete;\r\n");
      out.write("      const countryRestrict = { country: \"kr\" };\r\n");
      out.write("      const MARKER_PATH =\r\n");
      out.write("        \"https://developers.google.com/maps/documentation/javascript/images/marker_green\"; //Marker_path\r\n");
      out.write("      const hostnameRegexp = new RegExp(\"^https?://.+?/\");\r\n");
      out.write("      const countries = {\r\n");
      out.write("        au: {\r\n");
      out.write("          center: { lat: -25.3, lng: 133.8 },\r\n");
      out.write("          zoom: 4,\r\n");
      out.write("        },\r\n");
      out.write("        br: {\r\n");
      out.write("          center: { lat: -14.2, lng: -51.9 },\r\n");
      out.write("          zoom: 3,\r\n");
      out.write("        },\r\n");
      out.write("        ca: {\r\n");
      out.write("          center: { lat: 62, lng: -110.0 },\r\n");
      out.write("          zoom: 3,\r\n");
      out.write("        },\r\n");
      out.write("        fr: {\r\n");
      out.write("          center: { lat: 46.2, lng: 2.2 },\r\n");
      out.write("          zoom: 5,\r\n");
      out.write("        },\r\n");
      out.write("        de: {\r\n");
      out.write("          center: { lat: 51.2, lng: 10.4 },\r\n");
      out.write("          zoom: 5,\r\n");
      out.write("        },\r\n");
      out.write("        mx: {\r\n");
      out.write("          center: { lat: 23.6, lng: -102.5 },\r\n");
      out.write("          zoom: 4,\r\n");
      out.write("        },\r\n");
      out.write("        nz: {\r\n");
      out.write("          center: { lat: -40.9, lng: 174.9 },\r\n");
      out.write("          zoom: 5,\r\n");
      out.write("        },\r\n");
      out.write("        it: {\r\n");
      out.write("          center: { lat: 41.9, lng: 12.6 },\r\n");
      out.write("          zoom: 5,\r\n");
      out.write("        },\r\n");
      out.write("        za: {\r\n");
      out.write("          center: { lat: -30.6, lng: 22.9 },\r\n");
      out.write("          zoom: 5,\r\n");
      out.write("        },\r\n");
      out.write("        es: {\r\n");
      out.write("          center: { lat: 40.5, lng: -3.7 },\r\n");
      out.write("          zoom: 5,\r\n");
      out.write("        },\r\n");
      out.write("        pt: {\r\n");
      out.write("          center: { lat: 39.4, lng: -8.2 },\r\n");
      out.write("          zoom: 6,\r\n");
      out.write("        },\r\n");
      out.write("        us: {\r\n");
      out.write("          center: { lat: 37.1, lng: -95.7 },\r\n");
      out.write("          zoom: 3,\r\n");
      out.write("        },\r\n");
      out.write("        uk: {\r\n");
      out.write("          center: { lat: 54.8, lng: -4.6 },\r\n");
      out.write("          zoom: 5,\r\n");
      out.write("        },\r\n");
      out.write("        \r\n");
      out.write("        kr: {\r\n");
      out.write("          center : { lat: 37.4388406 ,lng: 126.6751131 },\r\n");
      out.write("          zoom: 12,\r\n");
      out.write("          icon:\"src/main/webapp/WEB-INF/views/pet/hospital.svg\"\r\n");
      out.write("        },\r\n");
      out.write("        \r\n");
      out.write("      };\r\n");
      out.write("\r\n");
      out.write("      function initMap() {\r\n");
      out.write("        map = new google.maps.Map(document.getElementById(\"map\"), {\r\n");
      out.write("          zoom: countries[\"kr\"].zoom,\r\n");
      out.write("          center: countries[\"kr\"].center,\r\n");
      out.write("          mapId: \"754cbc994efe86ef\",\r\n");
      out.write("          mapTypeControl: true,\r\n");
      out.write("          panControl: true,\r\n");
      out.write("          zoomControl: true,\r\n");
      out.write("          streetViewControl: true,\r\n");
      out.write("          icon:\"src/main/webapp/WEB-INF/views/pet/hospital.svg\"\r\n");
      out.write("        });\r\n");
      out.write("        infoWindow = new google.maps.InfoWindow({\r\n");
      out.write("          content: document.getElementById(\"info-content\"),\r\n");
      out.write("        });\r\n");
      out.write("        // Create the autocomplete object and associate it with the UI input control.\r\n");
      out.write("        // Restrict the search to the default country, and to place type \"cities\".\r\n");
      out.write("        autocomplete = new google.maps.places.Autocomplete(\r\n");
      out.write("          document.getElementById(\"autocomplete\"),\r\n");
      out.write("          {\r\n");
      out.write("            types: [\"(regions)\"],\r\n");
      out.write("            componentRestrictions: countryRestrict,\r\n");
      out.write("          }\r\n");
      out.write("        );\r\n");
      out.write("        places = new google.maps.places.PlacesService(map);\r\n");
      out.write("        autocomplete.addListener(\"place_changed\", onPlaceChanged);\r\n");
      out.write("        // Add a DOM event listener to react when the user selects a country.\r\n");
      out.write("        document\r\n");
      out.write("          .getElementById(\"country\")\r\n");
      out.write("          .addEventListener(\"change\", setAutocompleteCountry);\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // When the user selects a city, get the place details for the city and\r\n");
      out.write("      // zoom the map in on the city.\r\n");
      out.write("      function onPlaceChanged() {\r\n");
      out.write("        const place = autocomplete.getPlace();\r\n");
      out.write("\r\n");
      out.write("        if (place.geometry && place.geometry.location) {\r\n");
      out.write("          map.panTo(place.geometry.location);\r\n");
      out.write("          map.setZoom(15);\r\n");
      out.write("          search();\r\n");
      out.write("        } else {\r\n");
      out.write("          document.getElementById(\"autocomplete\").placeholder = \"Enter a city\";\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // Search for hospitals in the selected city, within the viewport of the map.\r\n");
      out.write("      function search() {\r\n");
      out.write("        const search = {\r\n");
      out.write("          bounds: map.getBounds(),\r\n");
      out.write("          types: [\"veterinary_care\"],\r\n");
      out.write("        };\r\n");
      out.write("        places.nearbySearch(search, (results, status, pagination) => {\r\n");
      out.write("          if (status === google.maps.places.PlacesServiceStatus.OK && results) {\r\n");
      out.write("            clearResults();\r\n");
      out.write("            clearMarkers();\r\n");
      out.write("\r\n");
      out.write("            // Create a marker for each hospital found, and\r\n");
      out.write("            // assign a letter of the alphabetic to each marker icon.\r\n");
      out.write("            for (let i = 0; i < results.length; i++) {\r\n");
      out.write("              const markerLetter = String.fromCharCode(\r\n");
      out.write("                \"A\".charCodeAt(0) + (i % 26)\r\n");
      out.write("              );\r\n");
      out.write("              const markerIcon = MARKER_PATH + markerLetter + \".png\"; //Marker_Path\r\n");
      out.write("              // Use marker animation to drop the icons incrementally on the map.\r\n");
      out.write("              markers[i] = new google.maps.Marker({\r\n");
      out.write("                position: results[i].geometry.location,\r\n");
      out.write("                animation: google.maps.Animation.DROP,\r\n");
      out.write("               /*  icon: {\r\n");
      out.write("                   url: \"hospital.png\",\r\n");
      out.write("                   scaledSize: new google.maps.Size(38, 31)\r\n");
      out.write("                } */\r\n");
      out.write("               icon: markerIcon,\r\n");
      out.write("              });\r\n");
      out.write("              // If the user clicks a hospital marker, show the details of that hospital\r\n");
      out.write("              // in an info window.\r\n");
      out.write("              markers[i].placeResult = results[i];\r\n");
      out.write("              google.maps.event.addListener(\r\n");
      out.write("                markers[i],\r\n");
      out.write("                \"click\",\r\n");
      out.write("                showInfoWindow\r\n");
      out.write("              );\r\n");
      out.write("              setTimeout(dropMarker(i), i * 100);\r\n");
      out.write("              addResult(results[i], i);\r\n");
      out.write("            }\r\n");
      out.write("          }\r\n");
      out.write("        });\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      function clearMarkers() {\r\n");
      out.write("        for (let i = 0; i < markers.length; i++) {\r\n");
      out.write("          if (markers[i]) {\r\n");
      out.write("            markers[i].setMap(null);\r\n");
      out.write("          }\r\n");
      out.write("        }\r\n");
      out.write("        markers = [];\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // Set the country restriction based on user input.\r\n");
      out.write("      // Also center and zoom the map on the given country.\r\n");
      out.write("      function setAutocompleteCountry() {\r\n");
      out.write("        const country = document.getElementById(\"country\").value;\r\n");
      out.write("\r\n");
      out.write("        if (country == \"all\") {\r\n");
      out.write("          autocomplete.setComponentRestrictions({ country: [] });\r\n");
      out.write("          map.setCenter({ lat: 15, lng: 0 });\r\n");
      out.write("          map.setZoom(2);\r\n");
      out.write("        } else {\r\n");
      out.write("          autocomplete.setComponentRestrictions({ country: country });\r\n");
      out.write("          map.setCenter(countries[country].center);\r\n");
      out.write("          map.setZoom(countries[country].zoom);\r\n");
      out.write("        }\r\n");
      out.write("        clearResults();\r\n");
      out.write("        clearMarkers();\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      function dropMarker(i) {\r\n");
      out.write("        return function () {\r\n");
      out.write("          markers[i].setMap(map);\r\n");
      out.write("        };\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      function addResult(result, i) {\r\n");
      out.write("        const results = document.getElementById(\"results\");\r\n");
      out.write("        const markerLetter = String.fromCharCode(\"A\".charCodeAt(0) + (i % 26));\r\n");
      out.write("        const markerIcon = MARKER_PATH + markerLetter + \".png\"; //\r\n");
      out.write("        const tr = document.createElement(\"tr\");\r\n");
      out.write("        tr.style.backgroundColor = i % 2 === 0 ? \"#F0F0F0\" : \"#FFFFFF\";\r\n");
      out.write("\r\n");
      out.write("        tr.onclick = function () {\r\n");
      out.write("          google.maps.event.trigger(markers[i], \"click\");\r\n");
      out.write("        };\r\n");
      out.write("        const iconTd = document.createElement(\"td\");\r\n");
      out.write("        const nameTd = document.createElement(\"td\");\r\n");
      out.write("        const icon = document.createElement(\"img\");\r\n");
      out.write("        icon.src = markerIcon;\r\n");
      out.write("        icon.setAttribute(\"class\", \"placeIcon\");\r\n");
      out.write("        icon.setAttribute(\"className\", \"placeIcon\");\r\n");
      out.write("        const name = document.createTextNode(result.name);\r\n");
      out.write("        iconTd.appendChild(icon);\r\n");
      out.write("        nameTd.appendChild(name);\r\n");
      out.write("        tr.appendChild(iconTd);\r\n");
      out.write("        tr.appendChild(nameTd);\r\n");
      out.write("        results.appendChild(tr);\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      function clearResults() {\r\n");
      out.write("        const results = document.getElementById(\"results\");\r\n");
      out.write("\r\n");
      out.write("        while (results.childNodes[0]) {\r\n");
      out.write("          results.removeChild(results.childNodes[0]);\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // Get the place details for a hospital. Show the information in an info window,\r\n");
      out.write("      // anchored on the marker for the hospital that the user selected.\r\n");
      out.write("      function showInfoWindow() {\r\n");
      out.write("        const marker = this;\r\n");
      out.write("        places.getDetails(\r\n");
      out.write("          { placeId: marker.placeResult.place_id },\r\n");
      out.write("          (place, status) => {\r\n");
      out.write("            if (status !== google.maps.places.PlacesServiceStatus.OK) {\r\n");
      out.write("              return;\r\n");
      out.write("            }\r\n");
      out.write("            infoWindow.open(map, marker);\r\n");
      out.write("            buildIWContent(place);\r\n");
      out.write("          }\r\n");
      out.write("        );\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // Load the place information into the HTML elements used by the info window.\r\n");
      out.write("      function buildIWContent(place) {\r\n");
      out.write("        document.getElementById(\"iw-icon\").innerHTML =\r\n");
      out.write("          '<img class=\"hospitalIcon\" ' + 'src=\"' + place.icon + '\"/>';\r\n");
      out.write("        document.getElementById(\"iw-url\").innerHTML =\r\n");
      out.write("          '<b><a href=\"' + place.url + '\">' + place.name + \"</a></b>\";\r\n");
      out.write("        document.getElementById(\"iw-address\").textContent = place.vicinity;\r\n");
      out.write("\r\n");
      out.write("        if (place.formatted_phone_number) {\r\n");
      out.write("          document.getElementById(\"iw-phone-row\").style.display = \"\";\r\n");
      out.write("          document.getElementById(\"iw-phone\").textContent =\r\n");
      out.write("            place.formatted_phone_number;\r\n");
      out.write("        } else {\r\n");
      out.write("          document.getElementById(\"iw-phone-row\").style.display = \"none\";\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // Assign a five-star rating to the hospital, using a black star ('&#10029;')\r\n");
      out.write("        // to indicate the rating the hospital has earned, and a white star ('&#10025;')\r\n");
      out.write("        // for the rating points not achieved.\r\n");
      out.write("        if (place.rating) {\r\n");
      out.write("          let ratingHtml = \"\";\r\n");
      out.write("\r\n");
      out.write("          for (let i = 0; i < 5; i++) {\r\n");
      out.write("            if (place.rating < i + 0.5) {\r\n");
      out.write("              ratingHtml += \"&#10025;\";\r\n");
      out.write("            } else {\r\n");
      out.write("              ratingHtml += \"&#10029;\";\r\n");
      out.write("            }\r\n");
      out.write("            document.getElementById(\"iw-rating-row\").style.display = \"\";\r\n");
      out.write("            document.getElementById(\"iw-rating\").innerHTML = ratingHtml;\r\n");
      out.write("          }\r\n");
      out.write("        } else {\r\n");
      out.write("          document.getElementById(\"iw-rating-row\").style.display = \"none\";\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // The regexp isolates the first part of the URL (domain plus subdomain)\r\n");
      out.write("        // to give a short URL for displaying in the info window.\r\n");
      out.write("        if (place.website) {\r\n");
      out.write("          let fullUrl = place.website;\r\n");
      out.write("          let website = String(hostnameRegexp.exec(place.website));\r\n");
      out.write("\r\n");
      out.write("          if (!website) {\r\n");
      out.write("            website = \"http://\" + place.website + \"/\";\r\n");
      out.write("            fullUrl = website;\r\n");
      out.write("          }\r\n");
      out.write("          document.getElementById(\"iw-website-row\").style.display = \"\";\r\n");
      out.write("          document.getElementById(\"iw-website\").textContent = website;\r\n");
      out.write("        } else {\r\n");
      out.write("          document.getElementById(\"iw-website-row\").style.display = \"none\";\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("      \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div style=\"text-align:center;position: relative;\">\r\n");
      out.write("   <img src=\"/resources/hos_banner.png\" style=\"height:500px; width:100%;\">\r\n");
      out.write("   <div class=\"body_banner\" style=\"\"> \r\n");
      out.write("      <div class=\"heading\">\r\n");
      out.write("        <div style=\"text-align:center;\">\r\n");
      out.write("          <p id=\"banner_top\" class=\"slide-up\">Hospital</p>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"notosanskr\">\r\n");
      out.write("          <p id=\"banner_bottom\" class=\"slide-up\">반려동물들을 신속하고 정확하게 진단해줄 병원들을 알려드립니다. </p>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("   </div>\r\n");
      out.write("   <div id=\"hos_search_box\">\r\n");
      out.write("      <div id=\"locationField\" style=\"display:flex;\">\r\n");
      out.write("        <input id=\"autocomplete\" placeholder=\"예) 인천,서울\" type=\"text\" />\r\n");
      out.write("        <img src=\"/resources/search.png\" id=\"hsearch\">  \r\n");
      out.write("      </div>    \r\n");
      out.write("   </div> \r\n");
      out.write("</div>\r\n");
      out.write("                       \r\n");
      out.write("        <!-- Hero Area End -->\r\n");
      out.write("        <!-- ================ contact section start ================= -->\r\n");
      out.write("        <section class=\"contact-section\">\r\n");
      out.write("                <div class=\"container\">\r\n");
      out.write("                   <div class=\"d-none d-sm-block mb-5 pb-4\">\r\n");
      out.write("                       <div id=\"MapID\" style=\"height: 90%; position: relative; overflow: hidden;\">\r\n");
      out.write("\r\n");
      out.write("    <div id=\"map\" style=\"height: 90%; position: relative; overflow: hidden;\"></div>\r\n");
      out.write("\r\n");
      out.write("    <div id=\"listing\">\r\n");
      out.write("      <table id=\"resultsTable\">\r\n");
      out.write("        <tbody id=\"results\"></tbody>\r\n");
      out.write("      </table>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div style=\"display: none\">\r\n");
      out.write("      <div id=\"info-content\">\r\n");
      out.write("        <table id=\"iw-box\">\r\n");
      out.write("          <tr id=\"iw-url-row\" class=\"iw_table_row\">\r\n");
      out.write("            <td id=\"iw-icon\" class=\"iw_table_icon\" style=\"display:none;\"></td>\r\n");
      out.write("            <td id=\"iw-url\"></td>\r\n");
      out.write("          </tr>\r\n");
      out.write("          <tr id=\"iw-address-row\" class=\"iw_table_row\">\r\n");
      out.write("            <td class=\"iw_attribute_name\">주소:</td>\r\n");
      out.write("            <td id=\"iw-address\"></td>\r\n");
      out.write("          </tr>\r\n");
      out.write("          <tr id=\"iw-phone-row\" class=\"iw_table_row\">\r\n");
      out.write("            <td class=\"iw_attribute_name\">전화번호:</td>\r\n");
      out.write("            <td id=\"iw-phone\"></td>\r\n");
      out.write("          </tr>\r\n");
      out.write("          <tr id=\"iw-rating-row\" class=\"iw_table_row\">\r\n");
      out.write("            <td class=\"iw_attribute_name\">평점:</td>\r\n");
      out.write("            <td id=\"iw-rating\"></td>\r\n");
      out.write("          </tr>\r\n");
      out.write("          \r\n");
      out.write("        </table>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  \r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("  </div>\r\n");
      out.write("                    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    <script src=\"https://polyfill.io/v3/polyfill.min.js?features=default\"></script>\r\n");
      out.write("   \r\n");
      out.write("    <script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAao778DaQyFRwcEnqkT6_Fi4HfnSmu67A&callback=initMap&libraries=places&v=weekly&radius=5000\"></script>\r\n");
      out.write("\r\n");
      out.write("    </body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
